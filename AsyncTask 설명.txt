AsyncTask(비동기) : 스레드를 쓰다보면 스레드 간의 동기화를 고려하여 설계해야하며, 여러 핸들러의
경우 사용이 복잡하다. 이러한 작업을 더 쉽게 해주는 추상클래스.
>> 긴 작업은 스레드로 작업하며, UI(화면조작)은 핸들러가 하던 것을 하나로 묶어서 사용한다.

앱이 실행되면 메인 스레드를 생성한다.
이 스레드는 안드로이드 UI 툴키트에 접근하여, 사용자의 입력을 기다리거나 디바이스 화면에 그리는
작업 등을 다룬다. = UI스레드 

※주의사항
1. UI 스레드가 블록(대기)되지 않도록 해야한다.
2. UI 스레드 이외 다른 스레드에서 UI 컴포넌트 접근을 하면 안된다.
(UI가 블록되면 안되는데 이럴 경우 오랜 시간이 걸리는 작업을 UI 스레드에서 수행한다면
작업이 완료될 때까지 UI 스레드가 대기해야 하므로 UI는 먹통이 된다.)

이렇기떄문에 안드로이드에서는 Handler , Runnable , AsyncTask등을 제공한다.
>AsyncTask는 메인스레드에서 생성 후 실행되며, 메인 스레드에서 처리시간이 오래 걸리는 작업을
백그라운드 스레드로 넘기고
계속 메인 스레드 작업을 진행하기 위해 사용된다.
AsyncTask는 비동기 Task로써 백그라운드 스레드라는 별도의 작업을 수행하기 때문에
AsyncTask를 실행시켜 놓고 메인 스레드는 다음 작업을 바로 할 수 있다.

백그라운드 스레드는 작업 처리 중 메인 스레드에서 처리하는 UI 작업에 영향을 주지 않기 때문에
UI가 늦게 뜨거나 터치에 늦게 반응하는 등의 일이 발생하지 않는다.

AsyncTask를 사용하면 백그라운드 스레드와 메인 스레드 간의 커뮤니티케이션이 간단해진다.
백그라운드 스레드에서 작업을 종료 후, 메인 스레드에서 통보해줄 수 있고(onPostExecute),
또한 백그라운드 스레드에서 작업 중에도 메인 스레드에게 UI 처리 요청을 쉽게 할 수 있다(onProgressUpdate)

※수 초정도의 짧은 시간걸리는 작업에서만 AsyncTask를 사용하도록 권장하고 있으며 그 이상이 걸리는
작업에 대해서는 다른 방법을 사용해야 한다.

--------------------------------------------------------------
MainActivity 클래스에서 생성 후, AsyncTask의 execute 메소드를 호출함으로써 시작되며,
곧 바로 onPreExecute 메소드가 호출된다.
※execute메소드의 인자로 전달한 값은 doInBackground 메소드가 파라메터로 받게된다.
이 때, excute메소드의 인자값을 보내지 않을 경우 doInBackground메소드에 인자 값이 없이
실행되게 되는데 해당 과정에서 publishProgress()메소드를 호출하면 백그라운드 쓰레드
중간에 메인 스레드에게 일을 시킬 수 있는 오류가 발생하게 된다.

해당 메소드에서 값을 리턴하면 onPostExecute메소드의 인자로 값을 전달하며
onProgressUpdate메소드에서 파라메터로 받은 값을 가지고 UI 작업을 한다.















